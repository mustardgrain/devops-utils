- name: Launch EC2 instance(s) | Verbose
  debug: msg="Creating {{ instance_count }} instance(s) of type {{ instance_type}} in new group {{ instance_group_name }}"
  
- name: Launch EC2 instance(s) | Launch instance 
  local_action: ec2 keypair="{{ keypair }}" group="{{ security_group }}" instance_tags="Name={{ instance_group_name }}" instance_type="{{ instance_type }}" image="{{ image }}" wait=yes count="{{ instance_count }}" region="{{ region }}"
  register: ec2

- name: Launch EC2 instance(s) | Add new instances to host group
  local_action: add_host name="{{ item.public_dns_name }}" groups="{{ instance_group_name }}"
  with_items: ec2.instances

- name: Launch EC2 instance(s) | Wait for SSH to be available 
  local_action: wait_for host="{{ item.public_dns_name }}" port=22
  with_items: ec2.instances

- name: Launch EC2 instance(s) | Breathing room (Ansible uses python apt, has issues running directly after boot)
  pause: seconds=15

- name: Launch EC2 instance(s) | Add inventory directory
  local_action: shell mkdir -p {{ vars['inventory_dir'] }}

- name: Launch EC2 instance(s) | Remove files
  local_action: shell rm -f {{ vars['inventory_dir'] }}/{{ instance_group_name }} {{ vars['inventory_dir'] }}/{{ instance_group_name }}.private

- name: Launch EC2 instance(s) | Add section header for inventory file
  local_action: shell echo '[{{ instance_group_name }}]' >> {{ vars['inventory_dir'] }}/{{ instance_group_name }}.public

- name: Launch EC2 instance(s) | Copy host names to an inventory file
  local_action: shell echo '{{ item.public_dns_name }}' >> {{ vars['inventory_dir'] }}/{{ instance_group_name }}.public
  with_items: ec2.instances

- name: Launch EC2 instance(s) | Copy internal IP addresses to clients to use
  local_action: shell echo '{{ item.private_ip }}' >> {{ vars['inventory_dir'] }}/{{ instance_group_name }}.private
  with_items: ec2.instances
